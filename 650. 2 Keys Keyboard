// each step has 1 or 2 actions depending on the last action
// last action: "copy" -> this action must be "past", or it will be infinit loop
// last action: "past" -> there can be 2  next actions: "past" or "copy"
// recursion
// class Solution {
// public:
    
//     void helper(int& res, int n, int step, int len, int past, string last_act){
        
//         if(len > n) return;
        
//         if(len == n)
//         {
//             res = (res == 0) ? step : min(res, step);
//             return;
//         }
        
//         if(last_act == "copy")
//             helper(res, n, step + 1, len + past, past, "past");
//         else
//         {
//             helper(res, n, step + 1, len, len, "copy"); // copy
//             helper(res, n, step + 1, len + past, past, "past"); // past
//         }
//     }
    
//     int minSteps(int n) {
        
//         if(n == 1) return 0;
        
//         int res = 0;
//         helper(res, n, 1, 1, 1, "copy");
//         return res;
        
//     }
// };
// DP
class Solution {
public:
    
    int minSteps(int n) {
        
        if(n == 1) return 0;
        
        vector<int> dp(n + 1, 0); // 長度
        
        for(int i = 2; i < dp.size(); i++)
            dp[i] = i;
        
        for(int i = 2; i < dp.size(); i++)
        {
            for(int j = i - 1; j > 1; j--)
            {
                if(i % j == 0)
                {
                    dp[i] = min(dp[i], dp[j] + i / j);
                }
            }
        }
        
        return dp.back();
        
    }
};

